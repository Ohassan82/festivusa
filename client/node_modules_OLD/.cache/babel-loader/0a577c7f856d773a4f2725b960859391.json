{"ast":null,"code":"import _classCallCheck from \"/Users/nest/Desktop/homework/festivusa/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nest/Desktop/homework/festivusa/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'YOUR_DOMAIN',\n      clientID: 'YOUR_CLIENT_ID',\n      redirectUri: 'http://localhost:3000/',\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }]);\n\n  return Auth;\n}(); // import history from '../../history';\n// import auth0 from 'auth0-js';\n// import { AUTH_CONFIG } from './auth0-variables';\n// export default class Auth {\n//     accessToken;\n//     idToken;\n//     expiresAt;\n//     auth0 = new auth0.WebAuth({\n//         domain: AUTH_CONFIG.domain,\n//         clientID: AUTH_CONFIG.clientId,\n//         redirectUri: AUTH_CONFIG.callbackUrl,\n//         responseType: 'token id_token',\n//         scope: 'openid'\n//       });\n//       constructor() {\n//         this.login = this.login.bind(this);\n//         this.logout = this.logout.bind(this);\n//         this.handleAuthentication = this.handleAuthentication.bind(this);\n//         this.isAuthenticated = this.isAuthenticated.bind(this);\n//         this.getAccessToken = this.getAccessToken.bind(this);\n//         this.getIdToken = this.getIdToken.bind(this);\n//         this.renewSession = this.renewSession.bind(this);\n//       }\n//       login() {\n//         this.auth0.authorize();\n//       }\n//       getIdToken() {\n//         return this.idToken;\n//       }\n//       setSession(authResult) {\n//         // Set isLoggedIn flag in localStorage\n//         localStorage.setItem('isLoggedIn', 'true');\n//         // Set the time that the access token will expire at\n//         let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n//         this.accessToken = authResult.accessToken;\n//         this.idToken = authResult.idToken;\n//         this.expiresAt = expiresAt;\n//         // navigate to the home route\n//         history.replace('/');\n//       }\n//       renewSession() {\n//         this.auth0.checkSession({}, (err, authResult) => {\n//            if (authResult && authResult.accessToken && authResult.idToken) {\n//              this.setSession(authResult);\n//            } else if (err) {\n//              this.logout();\n//              console.log(err);\n//              alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n//            }\n//         });\n//       }\n//       logout() {\n//         // Remove tokens and expiry time\n//         this.accessToken = null;\n//         this.idToken = null;\n//         this.expiresAt = 0;\n//         // Remove isLoggedIn flag from localStorage\n//         localStorage.removeItem('isLoggedIn');\n//         // navigate to the home route\n//         history.replace('/');\n//       }\n//       isAuthenticated() {\n//         // Check whether the current time is past the\n//         // access token's expiry time\n//         let expiresAt = this.expiresAt;\n//         return new Date().getTime() < expiresAt;\n//       }\n//     }  \n\n\nexport { Auth as default };","map":{"version":3,"sources":["/Users/nest/Desktop/homework/festivusa/client/src/component/auth/Auth.js"],"names":["auth0","Auth","WebAuth","domain","clientID","redirectUri","responseType","scope","authorize"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;;IAEqBC,I;;;;;;SACnBD,K,GAAQ,IAAIA,KAAK,CAACE,OAAV,CAAkB;AACxBC,MAAAA,MAAM,EAAE,aADgB;AAExBC,MAAAA,QAAQ,EAAE,gBAFc;AAGxBC,MAAAA,WAAW,EAAE,wBAHW;AAIxBC,MAAAA,YAAY,EAAE,gBAJU;AAKxBC,MAAAA,KAAK,EAAE;AALiB,KAAlB,C;;;;;4BAQA;AACN,WAAKP,KAAL,CAAWQ,SAAX;AACD;;;;KAgBH;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;SA5GqBP,I","sourcesContent":["import auth0 from 'auth0-js';\n\nexport default class Auth {\n  auth0 = new auth0.WebAuth({\n    domain: 'YOUR_DOMAIN',\n    clientID: 'YOUR_CLIENT_ID',\n    redirectUri: 'http://localhost:3000/',\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  login() {\n    this.auth0.authorize();\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import history from '../../history';\n// import auth0 from 'auth0-js';\n// import { AUTH_CONFIG } from './auth0-variables';\n\n\n\n// export default class Auth {\n//     accessToken;\n//     idToken;\n//     expiresAt;\n\n//     auth0 = new auth0.WebAuth({\n//         domain: AUTH_CONFIG.domain,\n//         clientID: AUTH_CONFIG.clientId,\n//         redirectUri: AUTH_CONFIG.callbackUrl,\n//         responseType: 'token id_token',\n//         scope: 'openid'\n//       });\n\n//       constructor() {\n//         this.login = this.login.bind(this);\n//         this.logout = this.logout.bind(this);\n//         this.handleAuthentication = this.handleAuthentication.bind(this);\n//         this.isAuthenticated = this.isAuthenticated.bind(this);\n//         this.getAccessToken = this.getAccessToken.bind(this);\n//         this.getIdToken = this.getIdToken.bind(this);\n//         this.renewSession = this.renewSession.bind(this);\n//       }\n//       login() {\n//         this.auth0.authorize();\n//       }\n//       getIdToken() {\n//         return this.idToken;\n//       }\n    \n//       setSession(authResult) {\n//         // Set isLoggedIn flag in localStorage\n//         localStorage.setItem('isLoggedIn', 'true');\n    \n//         // Set the time that the access token will expire at\n//         let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n//         this.accessToken = authResult.accessToken;\n//         this.idToken = authResult.idToken;\n//         this.expiresAt = expiresAt;\n    \n//         // navigate to the home route\n//         history.replace('/');\n//       }\n    \n//       renewSession() {\n//         this.auth0.checkSession({}, (err, authResult) => {\n//            if (authResult && authResult.accessToken && authResult.idToken) {\n//              this.setSession(authResult);\n//            } else if (err) {\n//              this.logout();\n//              console.log(err);\n//              alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n//            }\n//         });\n//       }\n    \n//       logout() {\n//         // Remove tokens and expiry time\n//         this.accessToken = null;\n//         this.idToken = null;\n//         this.expiresAt = 0;\n    \n//         // Remove isLoggedIn flag from localStorage\n//         localStorage.removeItem('isLoggedIn');\n    \n//         // navigate to the home route\n//         history.replace('/');\n//       }\n    \n//       isAuthenticated() {\n//         // Check whether the current time is past the\n//         // access token's expiry time\n//         let expiresAt = this.expiresAt;\n//         return new Date().getTime() < expiresAt;\n//       }\n\n//     }  "]},"metadata":{},"sourceType":"module"}